# Coded by: Sourav singh :)

import cv2
import numpy as np

face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
eye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_eye.xml')

# To read the image.

img = cv2.imread("trial.jpg")                                                        # img- image that needs to be read.

# To convert the image into gray.
gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
    
faces = face_cascade.detectMultiScale(gray, scaleFactor = 1.3, minNeighbors=5)       # On Decreasing the scale factor accuracy level increases.

# For loop for finding faces in the img.

for x,y,w,h in faces:
    img = cv2.rectangle(img, (x,y), (x+w,y+h), (0,255,0),5)                          # Creating rectangles over the faces!!
    gray2 = gray[y:y+h, x:x+w]
    color = img[y:y+h, x:x+w]
    eyes = eye_cascade.detectMultiScale(gray2, scaleFactor = 1.03, minNeighbors=25)       
    
    # For loop for finding eyes in the rectangular block over th faces.
     
    for (X,Y,W,H) in eyes:
        cv2.rectangle(color,(X,Y), (X+W,Y+H), (0,255,0), 3)
        cv2.rectangle(color,(X,Y), (X+W,Y+H), (0,255,0), 3)

resized = cv2.resize(img,(int(img.shape[1]/4),int(img.shape[0]/4)))                  # Just to resize the size if the image(its optional).
cv2.imshow("IMAGE",resized)
cv2.waitKey(0)
cv2.destroyAllWindows()
